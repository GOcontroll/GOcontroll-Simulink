%%***************************************************************************************
%% file         sfcn_read_accel.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%%
%%***************************************************************************************

%implements sfcn_read_accel "C"

%function BlockTypeSetup(block, system) void
	%<LibAddToCommonIncludes("iio.h")>
%endfunction

%function BlockInstanceSetup(block, system) void
	%%verify that there is only one instance of this block
	%if EXISTS("read_accel") == 0
		%assign ::read_accel = 1

		%openfile buff
			struct iio_context *accel_ctx;
			struct iio_device *accel_dev;
			struct iio_channel *accel_x_chan, *accel_y_chan, *accel_z_chan;
			struct iio_buffer *accel_buff;
			bool accel_run = true;
		%closefile buff

		%<LibSetSourceFileSection(LibGetModelDotCFile(), "Declarations", buff)>
	%else
		%<LibBlockReportError(block, "There cannot be more than one read accelerometer blocks in a model")>
	%endif
%endfunction

%% Function: Start ==========================================================
%%
%% Purpose:
%%      Code generation for initialization
%%
%function Start(block, system) Output
	{
		ssize_t bytes;
		int res;
		accel_ctx = iio_create_local_context();
		if (accel_ctx == NULL) {
			fprintf(stderr, "Could not get iio context: %s\n", strerror(errno));
			accel_run = false;
			goto accel_end;
		}

		accel_dev = iio_context_find_device(accel_ctx, "lis2dw12");
		if (accel_dev == NULL) {
			fprintf(stderr, " Could not find lis2dw12\n");
			iio_context_destroy(accel_ctx);
			accel_run = false;
			goto accel_end;
		}

		bytes = iio_device_attr_write(accel_dev, "sampling_frequency", "%<block.RTWdata.sampling_frequency>");
		if (bytes < 0) {
			fprintf(stderr, "could not set sampling_frequency: %s\n", strerror((int) bytes));
			iio_context_destroy(accel_ctx);
			accel_run = false;
			goto accel_end;
		}

		accel_x_chan = iio_device_find_channel(accel_dev, "accel_x", false);
		accel_y_chan = iio_device_find_channel(accel_dev, "accel_y", false);
		accel_z_chan = iio_device_find_channel(accel_dev, "accel_z", false);
		if (accel_x_chan == NULL || accel_y_chan == NULL || accel_z_chan == NULL) {
			fprintf(stderr, "Could not get accel channels\n");
			iio_context_destroy(accel_ctx);
			accel_run = false;
			goto accel_end;
		}

		iio_channel_enable(accel_x_chan);
		iio_channel_enable(accel_y_chan);
		iio_channel_enable(accel_z_chan);
		
		%%even though scale seems to be a channel_attr, changing it for one channel changes it for all of them.
		bytes = iio_channel_attr_write(accel_x_chan, "scale", "%<block.RTWdata.scale>");
		if (bytes < 0) {
			fprintf(stderr, "Could set x scale value: %s\n", strerror((int)bytes));
			iio_context_destroy(accel_ctx);
			accel_run = false;
			goto accel_end;
		}

		accel_buff = iio_device_create_buffer(accel_dev,1, false);
		if (accel_buff == NULL) {
			fprintf(stderr, "Could not create iio buffer: %s\n", strerror(errno));
			iio_context_destroy(accel_ctx);
			accel_run = false;
			goto accel_end;
		}

		res = iio_buffer_set_blocking_mode(accel_buff, false);
		if (res < 0) {
			fprintf(stderr,"Could net set buffer blocking mode: %s\n", strerror(res));
			iio_buffer_destroy(accel_buff);
			iio_context_destroy(accel_ctx);
			accel_run = false;
			goto accel_end;
		}
accel_end:
%%This has to be here otherwise gcc errors and zig generates a warning as it is only allowed past C23?
bytes = 0;
	}
%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output
	if (accel_run) {
		ssize_t bytes;
		char channel_buff[2];
		if ((bytes = iio_buffer_refill(accel_buff)) <= 0) {
			if (bytes != -EAGAIN) {
				fprintf(stderr, "Could not refill iio accel buffer: %s\n", strerror((int)bytes));
				accel_run = false;
			}
		} else {
			bytes = iio_channel_read(accel_x_chan, accel_buff, channel_buff, sizeof(channel_buff));
			if (bytes < 0) {
				fprintf(stderr, "Could not read accel_x: %s\n", strerror((int)bytes));
				accel_run = false;
			}
			if (bytes == 2) {
			%<LibBlockOutputSignal(0, "", "", 0)> = (float) *(int16_t *)channel_buff * %<block.RTWdata.scale>;
			}
			bytes = iio_channel_read(accel_y_chan, accel_buff, channel_buff, sizeof(channel_buff));
			if (bytes < 0) {
				fprintf(stderr, "Could not read accel_y: %s\n", strerror((int)bytes));
				accel_run = false;
			}
			if (bytes == 2) {
				%<LibBlockOutputSignal(1, "", "", 0)> = (float) *(int16_t *)channel_buff * %<block.RTWdata.scale>;
			}
			bytes = iio_channel_read(accel_z_chan, accel_buff, channel_buff, sizeof(channel_buff));
			if (bytes < 0) {
				fprintf(stderr, "Could not read accel_z: %s\n", strerror((int)bytes));
				accel_run = false;
			}
			if (bytes == 2) {
				%<LibBlockOutputSignal(2, "", "", 0)> = (float) *(int16_t *)channel_buff * %<block.RTWdata.scale>;
			}
		}
	}
%endfunction

%function Terminate(block, system) Output
	iio_buffer_destroy(accel_buff);
	iio_context_destroy(accel_ctx);
%endfunction