%% Copyright (C) 2014 Czech Technical University in Prague
%%
%% Authors:
%%     Michal Horn  <hornmich@fel.cvut.cz>
%%     Michal Sojka <sojkam1@fel.cvut.cz>
%%     Pavel Pisa <pisa@cmp.felk.cvut.cz> - author of SocketCAN port
%%
%% Redistribution and use in source and binary forms, with or without
%% modification, are permitted provided that the following conditions are
%% met:
%%
%% 1. Redistributions of source code must retain the above copyright
%%    notice, this list of conditions and the following disclaimer.
%%
%% 2. Redistributions in binary form must reproduce the above copyright
%%    notice, this list of conditions and the following disclaimer in the
%%    documentation and/or other materials provided with the
%%    distribution.
%%
%% 3. Neither the name of the copyright holder nor the names of its
%%    contributors may be used to endorse or promote products derived
%%    from this software without specific prior written permission.
%%
%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
%% "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
%% LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
%% A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
%% HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
%% SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
%% LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
%% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
%% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
%% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%%
%% File : sfunction_cantransmit.tlc
%% Abstract:
%%     TLC file for configuring the CAN TX buffer on the TI TMS570LS3137 MCU
%%
%% References:
%%     BlockTypeSetup() : refs/rtw_tlc.pdf p. 277
%%     Outputs()        : refs/rtw_tlc.pdf p. 281


%% Adopted for use by GOcontroll 2024		http://www.gocontroll.com		All right reserved
%% File : sfcn_can_send_v2.tlc
%% Brief : tlc file for generating code to send CAN messages on the Moduline Controllers

%implements sfcn_can_send_v2 "C"

%include "can_common.tlc"

%% Function: BlockTypeSetup ====================================================
%function BlockTypeSetup(block, system) void
  %<CANCommonBlockTypeSetup()>
%endfunction

%% Function: BlockInstanceSetup ================================================
%function BlockInstanceSetup(block, system) void
	%assign module_id_par = LibBlockParameterValue(module_id, 0)
	%% Check if the socket for this bus is already there, if not create it
	%<CreateCanSocket(module_id_par)>
%endfunction

%% Function: Start =============================================================
%function Start(block, system) Output
	%assign module_id_par = LibBlockParameterValue(module_id, 0)
	%% Initialize the socket if it hasn't already been done
	%<InitCanSocket(module_id_par)>
%endfunction

%% Function: Outputs ===========================================================
%function Outputs(block, system) Output
	%if !SLibCodeGenForSim()
		%assign message = LibBlockInputSignal(0, "", "", 0)
		%% message will be of the type CAN_MESSAGE, run this command in the matlab console to find the definition: 
		%% edit(fullfile(matlabroot, 'toolbox','shared','can','src','scanutil','can_message.h'));
		%assign module_id_par = LibBlockParameterValue(module_id, 0)

		{
			struct can_frame sc_frame;

			%% Transmit CAN_MESSAGE
			sc_frame.can_dlc = %<message>.Length;

			%%Write all bytes in one go
			*(uint64_t *)&sc_frame.data[0]= *(uint64_t *)&%<message>.Data[0];

			%%Set ID and flags
			sc_frame.can_id=%<message>.ID;
			if (%<message>.Extended)
				sc_frame.can_id|=CAN_EFF_FLAG;
			if (%<message>.Remote)
				sc_frame.can_id|=CAN_RTR_FLAG;
			send(can_%<module_id_par>, &sc_frame, sizeof(sc_frame), 0);

		}
	%endif
%endfunction

%% Function: Terminate ===========================================================
%function Terminate(block, system) Output
	%assign module_id_par = LibBlockParameterValue(module_id, 0)
	%<CloseCanSocket(module_id_par)>
%endfunction

%% [EOF]
