%%***************************************************************************************
%% file         sfcn_can_send.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2013 (c) by HAN Automotive     http://www.han.nl     All rights reserved
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% This file is part of the HANcoder Target Matlab/Simulink Blockset environment. For the
%% licensing terms, please contact HAN Automotive.
%%
%% This software has been carefully tested, but is not guaranteed for any particular
%% purpose. HAN Automotive does not offer any warranties and does not guarantee the
%% accuracy, adequacy, or completeness of the software and is not responsible for any
%% errors or omissions or the results obtained from use of the software.
%%
%%***************************************************************************************
%implements  sfcn_can_send "C"


%% add required include files
%<LibAddToCommonIncludes("CANdriver.h")>


%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
%endfunction


%% Function: Start ==========================================================
%%
%% Purpose:
%%      Code generation for initialization
%%
%function Start(block, system) Output
	CANsocket(%<block.RTWdata.canBus>); /* Initialize CAN socket */
%endfunction

%% Function: Update ==========================================================
%%
%% Purpose:
%%      Code generation for signal input
%%
%function Update(block, system) Output
	/* Sending a message over CAN */
	{
	struct can_frame sendframe; /* Declare a frame to send */
	sendframe.can_id = %<LibBlockInputSignal(0, "", "", 0)>; /* Mask value for ID */

	%if(block.RTWdata.RTR)
		sendframe.can_id |= CAN_RTR_FLAG; /* Add RTR bit to identifier */
	%endif

	%if CAST("Number",block.RTWdata.frameType) == 2
		sendframe.can_id |= CAN_EFF_FLAG; /* Set CAN_EFF_FLAG for extended identifiers */
	%endif

	sendframe.can_dlc = %<block.RTWdata.dataLength>; /* Mask value for number of bytes */

	/* prepare the data */
    %foreach counter = block.RTWdata.dataLength
        sendframe.data[%<counter>] = %<LibBlockInputSignal(counter + 1, "", "", 0)>;
    %endforeach

	if(write(canConnection.socket[%<block.RTWdata.canBus>], &sendframe, sizeof(struct can_frame)) < 0)		/* Send message */
		perror("Error in sending a CAN message");
	}
%endfunction


%%******************************* end of sfcn_can_send.tlc ******************************
