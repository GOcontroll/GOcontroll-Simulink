%%***************************************************************************************
%% file         sfcn_UDPConfig.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%% endinternal
%%
%%***************************************************************************************

%implements sfcn_UDPConfig "C"
%include "udp_common.tlc"

%% Function: BlockTypeSetup ==========================================================
%%
%% Runs once for the block type, no matter how many blocks are present in the model

%function BlockTypeSetup(block, system) void
	%<UdpCommonBlockTypeSetup()>
%endfunction

%% Function: BlockInstanceSetup ==========================================================
%%
%% Runs once for every instance of the block in the model

%function BlockInstanceSetup(block, system) void
	%if EXISTS(::%<block.RTWdata.socket_id>) == 0
		%openfile tmpBufDecls
			int udp_socket_%<block.RTWdata.socket_id>;
		%closefile tmpBufDecls
		%<LibSetSourceFileSection(LibGetModelDotCFile(), "Declarations", tmpBufDecls)>
		%assign ::%<block.RTWdata.socket_id> = 1
	%else
		%<LibBlockReportError(block, "A socket is already configured with that socket ID, can't configure the same socket twice")>
	%endif
%endfunction

%% Function: Start ==========================================================
%%
%% Purpose:
%%      initialize the reconnect_state struct

%function Start(block, system) Output
	%assign socket = "udp_socket_%<block.RTWdata.socket_id>"
	{
		%<socket> = socket(AF_INET, SOCK_DGRAM, 0);

		if(%<socket> < 0){
			fprintf(stderr, "Error while creating UDP socket\n");
			return;
		}
		// Set broadcast mode
		int broadcast = %<block.RTWdata.broadcast>;
		if (broadcast) {
			if (setsockopt(%<socket>, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)))
				fprintf(stderr, "Could set socket to broadcast\n");
		}
		struct sockaddr_in server_addr;
		// Set port and IP:
		server_addr.sin_family = AF_INET;
		server_addr.sin_port = htons(%<block.RTWdata.port>);
		server_addr.sin_addr.s_addr = inet_addr("%<block.RTWdata.ip>");

		// Bind to the set port and IP:
		if(bind(%<socket>, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0){
			fprintf(stderr,"Couldn't bind to the port\n");
		}
	}
%endfunction

%% Function: Output ==========================================================
%%
%% Purpose:
%%      Code generation for signal output

%function Outputs(block, system) Output
%endfunction

%% Function: Terminate ==========================================================
%%
%% Purpose:
%%      Code generation for signal output

%function Terminate (block, system) Output
	close(udp_socket_%<block.RTWdata.socket_id>);
%endfunction