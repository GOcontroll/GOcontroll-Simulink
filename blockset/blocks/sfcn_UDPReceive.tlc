%%***************************************************************************************
%% file         sfcn_UDPReceive.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%% endinternal
%%
%%***************************************************************************************

%implements sfcn_UDPReceive "C"
%include "udp_common.tlc"

%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
	%<UdpCommonBlockTypeSetup()>
%endfunction

%function Start(block, system) Output
	%assign socket_id = block.SFcnParamSettings.socket_id
	%if EXISTS(::%<socket_id>) == 0
		%assign error = "No UDP Configuration block present with the socket ID %<socket_id>"
		%<LibBlockReportError(block, error)>
	%endif
	%assign receive_socket = "::receive_%<socket_id>"
	%if EXISTS(%<receive_socket>) == 0
		%assign %<receive_socket> = 1
	%else
		%assign error = "There is already a UDP Receive block for the socket ID %<socket_id>, there is only supposed to be one receiver per socket."
		%<LibBlockReportError(block,error)>
	%endif
%endfunction

%% Function: Output ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output
	%assign bytes_read = LibBlockOutputSignal(2, "", "", 0) %% uint32
	%assign receive_buffer = LibBlockOutputSignalAddr(1, "", "", 0) %% uint8[]
	%assign receive_buffer_size = LibBlockOutputSignalWidth(1)
	%assign socket_id = "udp_socket_%<block.SFcnParamSettings.socket_id>"
	{
		%% bytes_read is unsigned but the output of recvfrom is a signed int, so we need to check for errors before writing the value into bytes_read
		int32_t n = 0;
		while ((n = recvfrom(%<socket_id>, %<receive_buffer>, %<receive_buffer_size>, MSG_DONTWAIT, NULL, NULL)) > 0){
			%<bytes_read> = n;
			%% Call a function to process the received message via function-call subsystem
			%foreach callIdx = NumSFcnSysOutputCalls
				%if LibIsEqual(SFcnSystemOutputCall[callIdx].BlockToCall,"unconnected")
					%continue
				%endif
				%% call the downstream system
				%<LibBlockExecuteFcnCall(block, callIdx)>\
			%endforeach
		}
	}
%endfunction